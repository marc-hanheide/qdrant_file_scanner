name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libmagic

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt

    - name: Lint with black
      continue-on-error: true
      run: |
        black --check --diff .

    - name: Run tests
      run: |
        python -m pytest test_*.py -v --tb=short --asyncio-mode=auto

    - name: Test package build
      run: |
        pip install build
        python -m build
        pip install dist/*.whl

    - name: Test CLI commands
      run: |
        rag-monitor --help
        rag-search --help
        rag-manage --help

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run security checks with bandit
      run: |
        bandit -r rag_file_monitor/ mcp_server.py -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        safety scan || true

  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Test Docker build (if Dockerfile exists)
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t rag-file-monitor:test .
        else
          echo "No Dockerfile found, skipping Docker build"
        fi
